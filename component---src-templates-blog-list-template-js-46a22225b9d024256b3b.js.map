{"version":3,"sources":["webpack://developers-garage/./src/templates/blog-list-template.js"],"names":["getSrcUrl","data","length","url","getSrcDescription","description","srcExists","pageContext","posts","allKontentItemBlog","edges","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","className","map","node","key","id","Link","to","elements","url_slug","value","src","teaser_image","alt","blog_title","publish_date","style","display","justifyContent","rel","margin"],"mappings":"oKAIE,SAASA,EAAUC,GACjB,OAAIA,EAAKC,OAAS,EACTD,EAAK,GAAGE,IAIR,IAIX,SAASC,EAAkBH,GACzB,OAAIA,EAAKC,OAAS,EACTD,EAAK,GAAGI,YAIR,IAIX,SAASC,EAAUL,GACjB,OAAIA,EAAKC,OAAS,EACT,GAIA,SAIb,mBAAe,GAA0B,IAAxBD,EAAuB,EAAvBA,KAAMM,EAAiB,EAAjBA,YACbC,EAAQP,EAAKQ,mBAAmBC,MAC9BC,EAA0BJ,EAA1BI,YACFC,EAA0B,IAAhBD,EACVE,EAASF,IAFmBJ,EAAbO,SAGfC,EAAWJ,EAAc,GAAM,EAAI,QAAU,UAAWA,EAAc,GAAGK,WACzEC,EAAW,UAAYN,EAAc,GAAGK,WAG9C,OACE,gBAAC,IAAD,KACE,uBAAKE,UAAU,uBACX,sBAAIA,UAAU,aACTV,EAAMW,KAAI,gBAAGC,EAAH,EAAGA,KAAH,OAIP,sBAAIC,IAAKD,EAAKE,IACd,gBAAC,EAAAC,KAAD,CAAML,UAAU,eAAeM,GAAI,SAAWJ,EAAKK,SAASC,SAASC,OACjE,uBAAKC,IAAK5B,EAAUoB,EAAKK,SAASI,aAAaF,OAC3CG,IAAK1B,EAAkBgB,EAAKK,SAASI,aAAaF,OAClDT,UAAWZ,EAAUc,EAAKK,SAASI,aAAaF,SACpD,0BAAKP,EAAKK,SAASM,WAAWJ,OAC9B,yBAAIP,EAAKK,SAASO,aAAaL,aAK3C,uBAAKM,MAAO,CAACC,QAAS,OAAQC,eAAgB,YACxCvB,GACE,gBAAC,EAAAW,KAAD,CAAMC,GAAIT,EAAUqB,IAAI,OAAOH,MAAO,CAACI,OAAQ,WAA/C,oBAIFxB,GACE,gBAAC,EAAAU,KAAD,CAAMC,GAAIP,EAAUmB,IAAI,OAAOH,MAAO,CAACI,OAAQ,WAA/C","file":"component---src-templates-blog-list-template-js-46a22225b9d024256b3b.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\n  \n  function getSrcUrl(data) {  \n    if (data.length > 0){\n      return data[0].url;\n    }\n    else\n    {\n      return \" \";\n    }\n  }\n  \n  function getSrcDescription(data) {\n    if (data.length > 0){\n      return data[0].description;\n    }\n    else\n    {\n      return \" \";\n    }\n  }\n  \n  function srcExists(data){\n    if (data.length > 0){\n      return '';\n    }\n    else\n    {\n      return 'hideMe';\n    }\n  }\n\nexport default ({data, pageContext}) => {\n    const posts = data.allKontentItemBlog.edges\n    const { currentPage, numPages } = pageContext\n    const isFirst = currentPage === 1\n    const isLast = currentPage === numPages\n    const prevPage = currentPage - 1 === 1 ? \"/blog\" : \"/blog/\" +(currentPage - 1).toString()\n    const nextPage = \"/blog/\" + (currentPage + 1).toString()\n\n\n    return (\n      <Layout>\n        <div className=\"blog-list-container\">\n            <ul className=\"blog-list\">\n                {posts.map(({ node }) => (\n                    // const title = node.elements.blog_title.value || node.elements.url_slug.value\n                    // return <div key={node.elements.url_slug.value}>{title}</div>\n\n                    <li key={node.id}>\n                    <Link className=\"sectionLinks\" to={'/blog/' + node.elements.url_slug.value}>\n                        <img src={getSrcUrl(node.elements.teaser_image.value)} \n                            alt={getSrcDescription(node.elements.teaser_image.value)}\n                            className={srcExists(node.elements.teaser_image.value)}></img>\n                        <h3>{node.elements.blog_title.value}</h3>\n                        <p>{node.elements.publish_date.value}</p>   \n                    </Link>               \n                    </li>\n                ))}\n            </ul>\n            <div style={{display: 'flex', justifyContent: 'center'}}>\n                {!isFirst && (\n                    <Link to={prevPage} rel=\"prev\" style={{margin: '0 1rem'}}>\n                    ← Previous Page\n                    </Link>\n                )}\n                {!isLast && (\n                    <Link to={nextPage} rel=\"next\" style={{margin: '0 1rem'}}>\n                    Next Page →\n                    </Link>\n                )}\n            </div>\n        </div>\n      </Layout>\n    )\n}\n\nexport const query = graphql`\n  query BlogListQuery($skip: Int!, $limit: Int!) {\n    allKontentItemBlog(\n      sort: { fields: elements___publish_date___value, order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n        edges {\n            node {\n              id\n              elements {\n                blog_title {\n                  value\n                }\n                publish_date {\n                  value(formatString: \"MMMM DD, YYYY\")\n                }\n                url_slug {\n                  value\n                }\n                teaser_image {\n                  value {\n                    url\n                    description\n                  }\n                }\n            }\n        }        \n    }\n    }\n}\n`"],"sourceRoot":""}